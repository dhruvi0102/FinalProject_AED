/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Requests;

import model.EcoSystem;
import model.FireDepartment.FireDepartment;
import model.Hospital.Hospital;
import model.Requests.Request;
import model.Requests.RequestDirectory;
import model.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import model.PoliceDepartment.PoliceDepartment;
import model.ShelterHome.Shelter;

/**
 *
 * @author siddh
 */
public class UnitsJpanel extends javax.swing.JPanel {

    /**
     * Creates new form UnitsJpanel
     */
    private EcoSystem ecoSystem;
    private JPanel userProcessContainer;

    public UnitsJpanel(JPanel userProcessContainer, EcoSystem ecoSystem, String entityName, String entityLocation, String entityArea, String typeOfEmergency, String comments, String dateTimeStamp, String status) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        setData(entityName, entityLocation, entityArea, typeOfEmergency, comments, dateTimeStamp, status);
        getUnits(typeOfEmergency);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblShelterService = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHospitalService = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPoliceService = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblFireService = new javax.swing.JTable();
        btnAssignShelter = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        btnAssignHospital = new javax.swing.JButton();
        btnAssignPolice = new javax.swing.JButton();
        btnAssignFire = new javax.swing.JButton();
        lblHospAvaUnits = new javax.swing.JLabel();
        lblPoliceAvaUnits = new javax.swing.JLabel();
        lblFireAvaUnits = new javax.swing.JLabel();
        lblShelterAvaUnits = new javax.swing.JLabel();
        lblHospital = new javax.swing.JLabel();
        lblPolice = new javax.swing.JLabel();
        lblFire = new javax.swing.JLabel();
        lblShelter = new javax.swing.JLabel();
        btnViewRequest = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblTypeOfEmergency = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        lblComments = new javax.swing.JLabel();
        lblArea = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblDateTimeStamp = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1600, 1050));
        setLayout(new java.awt.BorderLayout());

        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblShelterService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "UserName", "Name", "Location"
            }
        ));
        jScrollPane1.setViewportView(tblShelterService);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 970, 566, 135));

        tblHospitalService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "UserName", "Name", "Location"
            }
        ));
        jScrollPane2.setViewportView(tblHospitalService);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 421, 566, 135));

        tblPoliceService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "UserName", "Name", "Location"
            }
        ));
        jScrollPane3.setViewportView(tblPoliceService);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 597, 566, 135));

        tblFireService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "UserName", "Name", "Location"
            }
        ));
        jScrollPane4.setViewportView(tblFireService);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 772, 566, 154));

        btnAssignShelter.setText("Assign ");
        btnAssignShelter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignShelterActionPerformed(evt);
            }
        });
        jPanel1.add(btnAssignShelter, new org.netbeans.lib.awtextra.AbsoluteConstraints(795, 1019, 170, -1));

        backJButton.setText("<< Back ");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        btnAssignHospital.setText("Assign ");
        btnAssignHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignHospitalActionPerformed(evt);
            }
        });
        jPanel1.add(btnAssignHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(795, 470, 150, -1));

        btnAssignPolice.setText("Assign");
        btnAssignPolice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignPoliceActionPerformed(evt);
            }
        });
        jPanel1.add(btnAssignPolice, new org.netbeans.lib.awtextra.AbsoluteConstraints(795, 658, 160, -1));

        btnAssignFire.setText("Assign ");
        btnAssignFire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignFireActionPerformed(evt);
            }
        });
        jPanel1.add(btnAssignFire, new org.netbeans.lib.awtextra.AbsoluteConstraints(795, 836, 160, -1));
        jPanel1.add(lblHospAvaUnits, new org.netbeans.lib.awtextra.AbsoluteConstraints(554, 382, 194, 20));
        jPanel1.add(lblPoliceAvaUnits, new org.netbeans.lib.awtextra.AbsoluteConstraints(554, 568, 181, 20));
        jPanel1.add(lblFireAvaUnits, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 744, 168, 20));
        jPanel1.add(lblShelterAvaUnits, new org.netbeans.lib.awtextra.AbsoluteConstraints(564, 938, 145, 20));

        lblHospital.setText("Hospital Service");
        jPanel1.add(lblHospital, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 382, -1, -1));

        lblPolice.setText("Police Service");
        jPanel1.add(lblPolice, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 575, -1, -1));

        lblFire.setText("Fire Service");
        jPanel1.add(lblFire, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 750, -1, -1));

        lblShelter.setText("Shelter Service");
        jPanel1.add(lblShelter, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 950, -1, -1));

        btnViewRequest.setText("View Requests");
        btnViewRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRequestActionPerformed(evt);
            }
        });
        jPanel1.add(btnViewRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, -1, 23));

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel5.setText("UNITS");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(407, 23, -1, -1));
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        lblName.setText("jLabel1");
        jPanel1.add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, 17));

        lblTypeOfEmergency.setText("jLabel4");
        jPanel1.add(lblTypeOfEmergency, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, -1, -1));

        lblLocation.setText("jLabel2");
        jPanel1.add(lblLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, -1, -1));

        lblComments.setText("jLabel5");
        jPanel1.add(lblComments, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, -1, -1));

        lblArea.setText("jLabel3");
        jPanel1.add(lblArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, -1, -1));

        lblStatus.setText("jLabel1");
        jPanel1.add(lblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 140, -1, 34));

        lblDateTimeStamp.setText("jLabel1");
        jPanel1.add(lblDateTimeStamp, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, -1, -1));

        jScrollPane5.setViewportView(jPanel1);

        add(jScrollPane5, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignShelterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignShelterActionPerformed
        String userName = "";
        int selectedRow = tblShelterService.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to assign", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            userName = (String) tblShelterService.getValueAt(selectedRow, 0);
            System.out.println("item" + userName);

        }

        String personName = lblName.getText();
        String personLocation = lblLocation.getText();
        String area = lblArea.getText();
        String typeOfEmergency = lblTypeOfEmergency.getText();
        String comments = lblComments.getText();
        String date = lblDateTimeStamp.getText();
        String selectedHospital = "Not Assigned";
        String selectedFireDept = userName;
        String selectedPoliceDept = "Not Assigned";
        String selectedShelter = "Not Assigned";
        String status = "Assigned";
        RequestDirectory reqDir = ecoSystem.getRequestDirectory();

        Request req = null;
        if (ecoSystem.getRequestDirectory() == null) {
            req = new Request(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
            reqDir.getRequests().add(req);
        } else {
            req = ecoSystem.getRequestDirectory().createRequest(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
        }

        for (Shelter fd : ecoSystem.getShelterDirectory().getShelterList()) {
            ArrayList<Request> fdReq = fd.getRequests();
            if (userName.equalsIgnoreCase(fd.getUserName())) {
                if (fdReq == null) {
                    fdReq = new ArrayList<>();
                }
                fdReq.add(req);
            }
            fd.setRequests(fdReq);
        }
        JOptionPane.showMessageDialog(null, "Shelter Department is assigned!");        
    }//GEN-LAST:event_btnAssignShelterActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void btnAssignHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignHospitalActionPerformed
        String userName = "";
        int selectedRow = tblHospitalService.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to assign", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            userName = (String) tblHospitalService.getValueAt(selectedRow, 0);
            System.out.println("item" + userName);

        }

        String personName = lblName.getText();
        String personLocation = lblLocation.getText();
        String area = lblArea.getText();
        String typeOfEmergency = lblTypeOfEmergency.getText();
        String comments = lblComments.getText();
        String date = lblDateTimeStamp.getText();
        String selectedHospital = "Not Assigned";
        String selectedFireDept = userName;
        String selectedPoliceDept = "Not Assigned";
        String selectedShelter = "Not Assigned";
        String status = "Assigned";
        RequestDirectory reqDir = ecoSystem.getRequestDirectory();

        Request req = null;
        if (ecoSystem.getRequestDirectory() == null) {
            req = new Request(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
            reqDir.getRequests().add(req);
        } else {
            req = ecoSystem.getRequestDirectory().createRequest(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
        }

        for (Hospital fd : ecoSystem.getHospitalDirectory().getHospitalDirectoryList()) {
            ArrayList<Request> fdReq = fd.getRequests();
            if (userName.equalsIgnoreCase(fd.getUserName())) {
                if (fdReq == null) {
                    fdReq = new ArrayList<>();
                }
                fdReq.add(req);
            }
            fd.setRequests(fdReq);
        }
        JOptionPane.showMessageDialog(null, "Hospital Department is assigned!");
    }//GEN-LAST:event_btnAssignHospitalActionPerformed

    private void btnAssignPoliceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignPoliceActionPerformed
        String userName = "";
        int selectedRow = tblPoliceService.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to assign", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            userName = (String) tblPoliceService.getValueAt(selectedRow, 0);
            System.out.println("item" + userName);

        }

        String personName = lblName.getText();
        String personLocation = lblLocation.getText();
        String area = lblArea.getText();
        String typeOfEmergency = lblTypeOfEmergency.getText();
        String comments = lblComments.getText();
        String date = lblDateTimeStamp.getText();
        String selectedHospital = "Not Assigned";
        String selectedFireDept = "Not Assigned";
        String selectedPoliceDept = userName;
        String selectedShelter = "Not Assigned";
        String status = lblStatus.getText();
        RequestDirectory reqDir = ecoSystem.getRequestDirectory();

        Request req = null;
        if (ecoSystem.getRequestDirectory() == null) {
            req = new Request(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
            reqDir.getRequests().add(req);
        } else {
            req = ecoSystem.getRequestDirectory().createRequest(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
        }

        for (PoliceDepartment pd : ecoSystem.getPoliceDeptDirectory().getPoliceDepartment()) {
            ArrayList<Request> pdReq = pd.getRequests();
            if (userName.equalsIgnoreCase(pd.getUserName())) {
                if (pdReq == null) {
                    pdReq = new ArrayList<>();
                }
                pdReq.add(req);
            }
            pd.setRequests(pdReq);
        }
        
        JOptionPane.showMessageDialog(null, "Police Department is assigned!");
    }//GEN-LAST:event_btnAssignPoliceActionPerformed

    private void btnAssignFireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignFireActionPerformed
        String userName = "";
        int selectedRow = tblFireService.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table to assign", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            userName = (String) tblFireService.getValueAt(selectedRow, 0);
            System.out.println("item" + userName);

        }

        String personName = lblName.getText();
        String personLocation = lblLocation.getText();
        String area = lblArea.getText();
        String typeOfEmergency = lblTypeOfEmergency.getText();
        String comments = lblComments.getText();
        String date = lblDateTimeStamp.getText();
        String selectedHospital = "Not Assigned";
        String selectedFireDept = userName;
        String selectedPoliceDept = "Not Assigned";
        String selectedShelter = "Not Assigned";
        String status = "Assigned";
        RequestDirectory reqDir = ecoSystem.getRequestDirectory();

        Request req = null;
        if (ecoSystem.getRequestDirectory() == null) {
            req = new Request(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
            reqDir.getRequests().add(req);
        } else {
            req = ecoSystem.getRequestDirectory().createRequest(personName, personLocation, area, typeOfEmergency, comments, date, selectedHospital, selectedFireDept, selectedPoliceDept, selectedShelter, status);
        }

        for (FireDepartment fd : ecoSystem.getFireDepartmentDirectory().getfireSquad()) {
            ArrayList<Request> fdReq = fd.getRequests();
            if (userName.equalsIgnoreCase(fd.getEmail())) {
                if (fdReq == null) {
                    fdReq = new ArrayList<>();
                }
                fdReq.add(req);
            }
            fd.setRequests(fdReq);
        }
        JOptionPane.showMessageDialog(null, "Fire Department is assigned!");
    }//GEN-LAST:event_btnAssignFireActionPerformed

    private void btnViewRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRequestActionPerformed
        // TODO add your handling code here:
        ViewRequestsJPanel manageViewReqs = new ViewRequestsJPanel(userProcessContainer, ecoSystem);
        userProcessContainer.add("manageViewReqs", manageViewReqs);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnViewRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnAssignFire;
    private javax.swing.JButton btnAssignHospital;
    private javax.swing.JButton btnAssignPolice;
    private javax.swing.JButton btnAssignShelter;
    private javax.swing.JButton btnViewRequest;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblArea;
    private javax.swing.JLabel lblComments;
    private javax.swing.JLabel lblDateTimeStamp;
    private javax.swing.JLabel lblFire;
    private javax.swing.JLabel lblFireAvaUnits;
    private javax.swing.JLabel lblHospAvaUnits;
    private javax.swing.JLabel lblHospital;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPolice;
    private javax.swing.JLabel lblPoliceAvaUnits;
    private javax.swing.JLabel lblShelter;
    private javax.swing.JLabel lblShelterAvaUnits;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTypeOfEmergency;
    private javax.swing.JTable tblFireService;
    private javax.swing.JTable tblHospitalService;
    private javax.swing.JTable tblPoliceService;
    private javax.swing.JTable tblShelterService;
    // End of variables declaration//GEN-END:variables

    private void setData(String entityName, String entityLocation, String entityArea, String typeOfEmergency, String comments, String dateTimeStamp, String status) {
        lblName.setText(entityName);
        lblLocation.setText(entityLocation);
        lblArea.setText(entityArea);
        lblTypeOfEmergency.setText(typeOfEmergency);
        lblComments.setText(comments);
        lblDateTimeStamp.setText(dateTimeStamp);
        lblStatus.setText(status);
    }

    private void getUnits(String typeOfEmergency) {
        List<String> emergencyList = Arrays.asList(typeOfEmergency.split(","));
        System.out.println("emergencyList" + emergencyList);
        if (typeOfEmergency.isEmpty()) {
            tblShelterService.setVisible(false);
            tblHospitalService.setVisible(false);
            tblFireService.setVisible(false);
            tblPoliceService.setVisible(false);
        } else {
            for (String s : emergencyList) {
                if (s.equalsIgnoreCase("Request Healthcare Services")) {
                    fetchHealthCareUnits();
                } else if (s.equalsIgnoreCase("Request Police Services")) {
                    fetchLawEnforceMentUnits();
                } else if (s.equalsIgnoreCase("Request Fire Services")) {
                    fetchFireServices();
                }  else if (s.equalsIgnoreCase("Request Shelter Services")) {
                    fetchShelterServices();
                }
                else {
                    fetchHealthCareUnits();
                    fetchLawEnforceMentUnits();
                    fetchFireServices();
                    fetchShelterServices();
                }
            }
        }

    }

    private void fetchHealthCareUnits() {
        DefaultTableModel model = (DefaultTableModel) tblHospitalService.getModel();
        JTableHeader th = tblHospitalService.getTableHeader();
        th.setFont(new Font("Serif", Font.BOLD, 15));
        model.setRowCount(0);
        int availUnitSize = (int) ecoSystem.getHospitalDirectory().getHospitalDirectoryList().stream().filter(l -> Boolean.TRUE.equals(l.isHospitalStatus())).count();
        lblHospAvaUnits.setText("Available Units: " + availUnitSize + "/" + ecoSystem.getHospitalDirectory().getHospitalDirectoryList().size());

        for (Hospital hd : ecoSystem.getHospitalDirectory().getHospitalDirectoryList()) {
            if (Boolean.TRUE.equals(hd.isHospitalStatus())) {
                Object[] row = new Object[3];

                row[0] = hd.getUserName();
                row[1] = hd.getHospitalName();
                row[2] = hd.getHospitalAddress();

                model.addRow(row);
            }

        }

           }

    private void fetchLawEnforceMentUnits() {
        DefaultTableModel model = (DefaultTableModel) tblPoliceService.getModel();
        JTableHeader th = tblPoliceService.getTableHeader();
        th.setFont(new Font("Serif", Font.BOLD, 15));
        model.setRowCount(0);
        int availUnitSize = (int) ecoSystem.getPoliceDeptDirectory().getPoliceDepartment().stream().filter(l -> Boolean.TRUE.equals(l.getAvailability())).count();
        lblPoliceAvaUnits.setText("Available Units: " + availUnitSize + "/" + ecoSystem.getPoliceDeptDirectory().getPoliceDepartment().size());

        for (PoliceDepartment pd : ecoSystem.getPoliceDeptDirectory().getPoliceDepartment()) {
            if (Boolean.TRUE.equals(pd.getAvailability())) {
                Object[] row = new Object[3];

                row[0] = pd.getUserName();
                row[1] = pd.getFullName();
                row[2] = pd.getAddress();

                model.addRow(row);
            }

        }

    }

    private void fetchFireServices() {
        DefaultTableModel model = (DefaultTableModel) tblFireService.getModel();
        JTableHeader th = tblFireService.getTableHeader();
        th.setFont(new Font("Serif", Font.BOLD, 15));
        model.setRowCount(0);

        int availUnitSize = (int) ecoSystem.getFireDepartmentDirectory().getfireSquad().stream().filter(l -> Boolean.TRUE.equals(l.getAvailability())).count();
        lblFireAvaUnits.setText("Available Units: " + availUnitSize + "/" + ecoSystem.getFireDepartmentDirectory().getfireSquad().size());

        for (FireDepartment fd : ecoSystem.getFireDepartmentDirectory().getfireSquad()) {
            if (Boolean.TRUE.equals(fd.getAvailability())) {
                Object[] row = new Object[3];

                row[0] = fd.getEmail();
                row[1] = fd.getFullName();
                row[2] = fd.getLocation();

                model.addRow(row);
            }

        }
    }
        private void fetchShelterServices() {
        DefaultTableModel model = (DefaultTableModel) tblShelterService.getModel();
        JTableHeader th = tblShelterService.getTableHeader();
        th.setFont(new Font("Serif", Font.BOLD, 15));
        model.setRowCount(0);

        int availUnitSize = (int) ecoSystem.getShelterDirectory().getShelterList().stream().filter(l -> Boolean.TRUE.equals(l.getAvailability())).count();
        lblShelterAvaUnits.setText("Available Units: " + availUnitSize + "/" + ecoSystem.getShelterDirectory().getShelterList().size());

        for (Shelter shel : ecoSystem.getShelterDirectory().getShelterList()) {
            if (Boolean.TRUE.equals(shel.getAvailability())) {
                Object[] row = new Object[4];
                row[0] = shel.getUserName();
                row[1] = shel.getShelterName();
                row[2] = shel.getAddress();
                model.addRow(row);
            }

        }

    }

 
}