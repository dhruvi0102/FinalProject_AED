/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.SystemAdmin;

import model.EcoSystem;
import model.Hospital.Hospital;
import model.Hospital.HospitalDirectory;
import model.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import model.Role.HospitalDepartmentAdmin;

/**
 *
 * @author shreyansipatel
 */
public class ManageHospitalDeptJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount account;
    private EcoSystem ecoSystem;

    public ManageHospitalDeptJPanel(JPanel userProcessContainer, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        populateNetworkTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtName = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHospitals = new javax.swing.JTable();
        txtAddress = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        lblAvailability = new javax.swing.JLabel();
        rdYes = new javax.swing.JCheckBox();
        lblSubTitle = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 220, -1));

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 3, 24)); // NOI18N
        lblTitle.setText("Hospital Management Panel");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, 220, 30));

        lblName.setText("Name :");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 67, -1));
        add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 220, -1));

        lblPassword.setText("Password :");
        add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 81, -1));

        lblUserName.setText("Username :");
        add(lblUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 72, 20));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, -1, -1));

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        tblHospitals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hospital Name", "User Name", "Password", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblHospitals);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, 623, 120));

        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });
        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 240, 220, 50));

        lblAddress.setText("Address :");
        add(lblAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, -1, -1));
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 220, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 540, -1, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 540, -1, -1));

        btnConfirm.setText("Confirm Update");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });
        add(btnConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 540, -1, -1));

        lblAvailability.setText("Availability :");
        add(lblAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, 20));

        rdYes.setText("Yes");
        rdYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdYesActionPerformed(evt);
            }
        });
        add(rdYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 310, -1, -1));

        lblSubTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lblSubTitle.setText("Add Hospital details :");
        add(lblSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText();
        String uname = txtUsername.getText();
        String password = txtPassword.getText();
        String address = txtAddress.getText();
        Boolean status = rdYes.isSelected();
        
        System.out.print("jbox" + rdYes.isSelected());
        
        try {
            if (name == null || name.isEmpty()) {
                throw new NullPointerException(" Name field is Empty");

            } else if (name.length() < 5 || Pattern.matches("^[A-Za-z ]*$", name) == false) {
                throw new Exception("Please enter valid  Name");

            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, " Name is Empty");

            return;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "  Name is invalid");

            return;
        }

        try {
            if (uname == null || uname.isEmpty()) {
                throw new NullPointerException("User Name field is Empty");

            } else if (uname.length() < 5) {
                throw new Exception("Please enter valid User Name");

            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "User Name is Empty");

            return;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, " User Name is invalid");

            return;
        }

        try {

            if (password == null || password.isEmpty()) {
                throw new NullPointerException("Password field is Empty");
            } else if (Pattern.matches("^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{5,30}$", password) == false) {
                throw new Exception("Invalid Password");
            }

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Password is Empty");

            return;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Password is of invalid pattern");

            return;
        }
        
        if(ecoSystem.getUserAccountDirectory().IsUsernameUnique(uname)==false){
            JOptionPane.showMessageDialog(null, "User name already exists");
        }
        else{
                UserAccount acc = ecoSystem.getUserAccountDirectory().addUserAccount(name, uname, password,address,status, new HospitalDepartmentAdmin());
                HospitalDirectory hospDirectory = ecoSystem.getHospitalDirectory();

                Hospital hosp = null;

                if (ecoSystem.getHospitalDirectory()==null)
                    {
                    hosp = new Hospital(name, uname, address, status);
                    hospDirectory.getHospitalDirectoryList().add(hosp);
                    }
                else {
                    hosp = ecoSystem.getHospitalDirectory().createHospital(name, uname, address, status);
                }
                JOptionPane.showMessageDialog(null,"Hospital Department is added");
            }
        
        populateNetworkTable();
        txtName.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        txtAddress.setText("");
        rdYes.setSelected(false);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectRow = tblHospitals.getSelectedRow();

        if (selectRow >= 0) {
            String username = (String) tblHospitals.getValueAt(selectRow, 1);
            String pwd = (String) tblHospitals.getValueAt(selectRow, 2);
            account = ecoSystem.getUserAccountDirectory().authenticateUser(username, pwd);

            txtName.setText(account.getFullName() + "");
            txtUsername.setText(account.getUserName() + "");
            txtPassword.setText(account.getPassword() + "");
            txtAddress.setText(account.getAddress() + "");
            rdYes.setSelected(true);

        } 
        else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
        
        btnSave.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnConfirm.setEnabled(true);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblHospitals.getSelectedRow();
        if (selectedRow >= 0) {
            String name = (String) tblHospitals.getValueAt(selectedRow, 0);
            String uname = (String) tblHospitals.getValueAt(selectedRow, 1);
            String password = (String) tblHospitals.getValueAt(selectedRow, 2);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            String warningMessage = "Are you sure you want to delete the user" + name.toUpperCase() + " ?";
            int selectionResult = JOptionPane.showConfirmDialog(null, warningMessage, "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                UserAccount user = ecoSystem.getUserAccountDirectory().authenticateUser(uname, password);
                ecoSystem.getUserAccountDirectory().deleteUserAccount(user);
                ecoSystem.getHospitalDirectory().deleteHospitalDirectory(uname);
                populateNetworkTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:

        String name = txtName.getText();
        String uname = txtUsername.getText();
        String password = txtPassword.getText();
        String address = txtAddress.getText();
        Boolean status = rdYes.isSelected();

        try {
            if (name == null || name.isEmpty()) {
                throw new NullPointerException(" Name field is Empty");

            } else if (name.length() < 5 || Pattern.matches("^[A-Za-z ]*$", name) == false) {
                throw new Exception("Please enter valid  Name");

            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, " Name is Empty");

            return;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "  Name is invalid");

            return;
        }

        try {
            if (uname == null || uname.isEmpty()) {
                throw new NullPointerException("User Name field is Empty");

            } else if (uname.length() < 5) {
                throw new Exception("Please enter valid User Name");

            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "User Name is Empty");

            return;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, " User Name is invalid");

            return;
        }

        try {

            if (password == null || password.isEmpty()) {
                throw new NullPointerException("Pwd field is Empty");
            } else if (Pattern.matches("^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{5,30}$", password) == false) {
                throw new Exception("Invalid Password");
            }

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Password is Empty");

            return;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Password is of invalid pattern");

            return;
        }

        

            ecoSystem.getUserAccountDirectory().updateUserAccount(account, name, uname, password,address, status);
            ecoSystem.getHospitalDirectory().updateHospital(name,uname,address,status);
            populateNetworkTable();
            btnSave.setEnabled(true);
            btnDelete.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnConfirm.setEnabled(false);
            txtName.setText("");
            txtUsername.setText("");
            txtPassword.setText("");
            txtAddress.setText("");
            rdYes.setSelected(false);
        
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void rdYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdYesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAvailability;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSubTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JCheckBox rdYes;
    private javax.swing.JTable tblHospitals;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void populateNetworkTable() {
        DefaultTableModel model = (DefaultTableModel) tblHospitals.getModel();

        model.setRowCount(0);

        System.out.println(" useracc " + ecoSystem.getUserAccountDirectory().getUserAccountList());

        for (UserAccount useracc : ecoSystem.getUserAccountDirectory().getUserAccountList()) {
            System.out.println("1");

            if ("model.Role.HospitalDepartmentAdmin".equals(useracc.getRole().getClass().getName())) {
                Object[] row = new Object[4];

                row[0] = useracc.getFullName();
                row[1] = useracc.getUserName();
                row[2] = useracc.getPassword();
                row[3] = useracc.getAddress();
                model.addRow(row);
            }
        }
    }
}
