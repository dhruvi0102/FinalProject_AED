/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.SystemAdmin;

import model.EcoSystem;
import model.FireDepartment.FireDepartment;
import model.FireDepartment.FireDepartmentDirectory;
import model.Role.FireDepartmentAdmin;
import model.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.util.Properties;

/**
 *
 * @author siddh
 */
public class ManageFireDept extends javax.swing.JPanel {

    /**
     * Creates new form ManageFireDept
     */ 
    JPanel userProcessContainer;
    UserAccount userAccount;
    EcoSystem ecoSystem;
    public ManageFireDept(JPanel userProcessContainer, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        populateTable();
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        lbluname = new javax.swing.JLabel();
        txtUname = new javax.swing.JTextField();
        lblPass = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        lblAddress = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFireEnterprise = new javax.swing.JTable();
        btnDel = new javax.swing.JButton();
        lbl_fireDept = new javax.swing.JLabel();
        lblAvailability = new javax.swing.JLabel();
        chbStatus = new javax.swing.JCheckBox();
        btnUpdate = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        Backbtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblName.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblName.setText("Name :");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 60, -1));
        add(txtFullName, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 230, -1));

        lbluname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbluname.setText("Username :");
        add(lbluname, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));
        add(txtUname, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 230, -1));

        lblPass.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPass.setText("Password :");
        add(lblPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, -1, -1));

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 230, -1));

        lblAddress.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAddress.setText("Address :");
        add(lblAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        txtLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLocationActionPerformed(evt);
            }
        });
        add(txtLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 220, 230, 50));

        btnSubmit.setBackground(new java.awt.Color(0, 153, 153));
        btnSubmit.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmit.setText("Save");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 333, -1, 30));

        tblFireEnterprise.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        tblFireEnterprise.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Station Name", "Username", "Password", "Address"
            }
        ));
        jScrollPane1.setViewportView(tblFireEnterprise);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 690, 112));

        btnDel.setBackground(new java.awt.Color(0, 153, 153));
        btnDel.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnDel.setForeground(new java.awt.Color(255, 255, 255));
        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });
        add(btnDel, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 530, -1, 30));

        lbl_fireDept.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        lbl_fireDept.setText("Manage Fire Department Admin");
        add(lbl_fireDept, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 410, 30));

        lblAvailability.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAvailability.setText("Availability :");
        add(lblAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, -1, -1));

        chbStatus.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chbStatus.setText("Yes");
        chbStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbStatusActionPerformed(evt);
            }
        });
        add(chbStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, -1, -1));

        btnUpdate.setBackground(new java.awt.Color(0, 153, 153));
        btnUpdate.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 530, -1, 30));

        btnConfirm.setBackground(new java.awt.Color(0, 153, 153));
        btnConfirm.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnConfirm.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirm.setText("Confirm Update");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });
        add(btnConfirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 530, -1, 30));

        Backbtn.setBackground(new java.awt.Color(0, 153, 153));
        Backbtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        Backbtn.setForeground(new java.awt.Color(255, 255, 255));
        Backbtn.setText("Back");
        Backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackbtnActionPerformed(evt);
            }
        });
        add(Backbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 90, 30));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Add Fire Unit details :");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel1.setText("  ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLocationActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed

        String fullName = txtFullName.getText();
        String userName = txtUname.getText();
        String password = txtPassword.getText();
        String location = txtLocation.getText();
        Boolean availability = chbStatus.isSelected();
        System.out.print("chbStatus"+chbStatus.isSelected());
        
        try {
            if(fullName==null || fullName.isEmpty()){
                throw new NullPointerException(" Name field is Empty");

            }else if(fullName.length()<5 || Pattern.matches("^[A-Za-z ]*$", fullName)==false){
                throw new Exception("Please enter valid  Name");

            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, " Name is Empty");

            return;

        }catch (Exception e){
            JOptionPane.showMessageDialog(null, "  Name is invalid");

            return;
        }

        try {
            if(userName==null || userName.isEmpty()){
                throw new NullPointerException("User Name field is Empty");

            }else if(userName.length()<5){
                throw new Exception("Please enter valid User Name");

            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "User Name is Empty");

            return;

        }catch (Exception e){
            JOptionPane.showMessageDialog(null, " User Name is invalid");

            return;
        }

        try {

            if(password==null || password.isEmpty()){
                throw new NullPointerException("Password field is Empty");
            }else if(Pattern.matches("^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{5,30}$", password)==false){
                throw new Exception("Invalid Password");
            }

        }  catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Password is Empty");

            return;
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Password is of invalid pattern");

            return;
        }

            if (ecoSystem.getUserAccountDirectory().IsUsernameUnique(userName)==false) {
            JOptionPane.showMessageDialog(null,"  User Name already exists ");
            }else{
                UserAccount acc = ecoSystem.getUserAccountDirectory().addUserAccount(fullName, userName, password,location,availability, new FireDepartmentAdmin());
                FireDepartmentDirectory firedeptdir = ecoSystem.getFireDepartmentDirectory();

                FireDepartment fireDept = null;

                if (ecoSystem.getFireDepartmentDirectory()==null)
                    {
                    fireDept = new FireDepartment(fullName,userName,location,availability);
                    firedeptdir.getfireSquad().add(fireDept);
                    }
                else {
                    fireDept = ecoSystem.getFireDepartmentDirectory().createfireSquad(fullName,userName,location,availability);
                }
                JOptionPane.showMessageDialog(null, "Fire Department is added!");
            }
        
        populateTable();
        txtFullName.setText("");
        txtUname.setText("");
        txtPassword.setText("");
        txtLocation.setText("");
        chbStatus.setSelected(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFireEnterprise.getSelectedRow();
        if (selectedRow >= 0) {
            String name = (String) tblFireEnterprise.getValueAt(selectedRow, 0);
            String uname = (String) tblFireEnterprise.getValueAt(selectedRow, 1);
            String password = (String) tblFireEnterprise.getValueAt(selectedRow, 2);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            String warningMessage = "Are you sure you want to delete the user [FireDept] - " + name.toUpperCase() + " ?";
            int selectionResult = JOptionPane.showConfirmDialog(null, warningMessage, "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                UserAccount user = ecoSystem.getUserAccountDirectory().authenticateUser(uname, password);
                ecoSystem.getUserAccountDirectory().deleteUserAccount(user);
                ecoSystem.getFireDepartmentDirectory().deleteDepartment(uname);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
        populateTable();
    }//GEN-LAST:event_btnDelActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void chbStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbStatusActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectRow = tblFireEnterprise.getSelectedRow();

        if(selectRow>=0){
            String username= (String) tblFireEnterprise.getValueAt(selectRow, 1);
            String pwd= (String) tblFireEnterprise.getValueAt(selectRow, 2);
            userAccount=ecoSystem.getUserAccountDirectory().authenticateUser(username, pwd);

            txtFullName.setText(userAccount.getFullName()+"");
            txtUname.setText(userAccount.getUserName()+"");
            txtPassword.setText(userAccount.getPassword()+"");
            txtLocation.setText(userAccount.getAddress()+"");
            chbStatus.setSelected(true);

        }
        else {
            JOptionPane.showMessageDialog(null,"Please select a row");
        }
        btnSubmit.setEnabled(false);
        btnDel.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnConfirm.setEnabled(true);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:

        String name = txtFullName.getText();
        String uname=txtUname.getText();
        String password=txtPassword.getText();
        String address = txtLocation.getText();
        Boolean status = chbStatus.isSelected();

        try {
            if(name==null || name.isEmpty()){
                throw new NullPointerException(" Name field is Empty");

            }else if(name.length()<5 || Pattern.matches("^[A-Za-z ]*$", name)==false){
                throw new Exception("Please enter valid  Name");

            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, " Name is Empty");

            return;

        }catch (Exception e){
            JOptionPane.showMessageDialog(null, "  Name is invalid");

            return;
        }

        try {
            if(uname==null || uname.isEmpty()){
                throw new NullPointerException("User Name field is Empty");

            }else if(uname.length()<5){
                throw new Exception("Please enter valid User Name");

            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "User Name is Empty");

            return;

        }catch (Exception e){
            JOptionPane.showMessageDialog(null, " User Name is invalid");

            return;
        }

        try {

            if(password==null || password.isEmpty()){
                throw new NullPointerException("Pwd field is Empty");
            }else if(Pattern.matches("^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{5,30}$", password)==false){
                throw new Exception("Invalid Password");
            }

        }  catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Password is Empty");

            return;
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Password is of invalid pattern");

            return;
        }

        

            ecoSystem.getUserAccountDirectory().updateUserAccount(userAccount,name,uname,password,address,status);
            ecoSystem.getFireDepartmentDirectory().updatefireDepartment(name, uname, uname, Boolean.TRUE);
            populateTable();
            btnSubmit.setEnabled(true);
            btnDel.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnConfirm.setEnabled(false);
            txtFullName.setText("");
            txtUname.setText("");
            txtPassword.setText("");
            txtLocation.setText("");
            chbStatus.setSelected(false);
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void BackbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackbtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BackbtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backbtn;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAvailability;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lbl_fireDept;
    private javax.swing.JLabel lbluname;
    private javax.swing.JTable tblFireEnterprise;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUname;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
      DefaultTableModel model = (DefaultTableModel) tblFireEnterprise.getModel();
        //JTableHeader th = tblFireEnterprise.getTableHeader();
        model.setRowCount(0);
	System.out.println("ecoSystemecoSystem" + ecoSystem + ecoSystem.getUserAccountDirectory().getUserAccountList());
        for (UserAccount user : ecoSystem.getUserAccountDirectory().getUserAccountList()) {
            if ("model.Role.FireDepartmentAdmin".equals(user.getRole().getClass().getName())) {
                
                Object[] row = new Object[4];

                row[0] = user.getFullName();
                row[1] = user.getUserName();
                row[2] = user.getPassword();
                row[3] = user.getAddress();

                model.addRow(row);

            }
        }

    }
}
