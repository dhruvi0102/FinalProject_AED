/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.SystemAdmin;

import model.UserAccount.UserAccount;
import model.EcoSystem;
import model.Role.ShelterHomeAdmin;
import model.ShelterHome.Shelter;
import model.ShelterHome.ShelterDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author shreyansipatel
 */
public class ManageShelterHomeJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem ecoSystem;

    public ManageShelterHomeJPanel(JPanel userProcessContainer, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        populateEntityTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblShelter = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblAvailability = new javax.swing.JLabel();
        rdYes = new javax.swing.JCheckBox();
        btnDelete = new javax.swing.JButton();
        btnConfirmUpdate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblSubTitle = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblName.setText("Name :");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, -1, -1));

        lblAddress.setText("Address");
        add(lblAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 220, -1, 20));
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 100, 203, -1));
        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 220, 200, 50));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 340, -1, -1));

        lblUserName.setText("UserName :");
        add(lblUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, -1, -1));

        lblPassword.setText("Password :");
        add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, -1, -1));

        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });
        add(txtUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, 203, -1));
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 203, -1));

        tblShelter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "UserName", "Password"
            }
        ));
        jScrollPane1.setViewportView(tblShelter);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, 631, 140));

        btnBack.setText("Back ");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 80, -1));
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 21, 84, -1));

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 3, 24)); // NOI18N
        lblTitle.setText("Shelter Home ");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 200, 30));

        lblAvailability.setText("Availability :");
        add(lblAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 290, -1, 20));

        rdYes.setText("Yes");
        rdYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdYesActionPerformed(evt);
            }
        });
        add(rdYes, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, -1, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 570, -1, -1));

        btnConfirmUpdate.setText("Confirm Update");
        btnConfirmUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmUpdateActionPerformed(evt);
            }
        });
        add(btnConfirmUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 570, -1, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 570, -1, -1));

        lblSubTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        lblSubTitle.setText("Add Shelter Service details :");
        add(lblSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        String name = txtName.getText();
        String username = txtUserName.getText();
        String password = txtPassword.getText();
        String address = txtAddress.getText();
        Boolean status = rdYes.isSelected();
        System.out.print("chbStatus1"+rdYes.isSelected());

        UserAccount useracc = ecoSystem.getUserAccountDirectory().addUserAccount(name, username, password,address, null, new ShelterHomeAdmin());
        ShelterDirectory shelterDirectory = ecoSystem.getShelterDirectory();

        Shelter shelter = null;
        if (ecoSystem.getShelterDirectory() == null) {
            shelter = new Shelter(username, name, address, status);
            shelterDirectory.getShelterList().add(shelter);
        } else {
            shelter = ecoSystem.getShelterDirectory().createShelter(name, username, address, status);
        }

        System.out.println(" shelterDirectory.getShelterList()" + shelterDirectory.getShelterList());
        populateEntityTable();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void rdYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdYesActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblShelter.getSelectedRow();
        if (selectedRow >= 0) {
            String name = (String) tblShelter.getValueAt(selectedRow, 0);
            String uname = (String) tblShelter.getValueAt(selectedRow, 1);
            String password = (String) tblShelter.getValueAt(selectedRow, 2);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            String warningMessage = "Are you sure you want to delete the user [FireDept] - " + name.toUpperCase() + " ?";
            int selectionResult = JOptionPane.showConfirmDialog(null, warningMessage, "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {
                UserAccount user = ecoSystem.getUserAccountDirectory().authenticateUser(uname, password);
                ecoSystem.getUserAccountDirectory().deleteUserAccount(user);
                ecoSystem.getShelterDirectory().deleteShelter(uname);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
        populateEntityTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConfirmUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmUpdateActionPerformed
        // TODO add your handling code here:

        String name = txtName.getText();
        String uname= txtUserName.getText();
        String password= txtPassword.getText();

        try {
            if(name==null || name.isEmpty()){
                throw new NullPointerException(" Name field is Empty");

            }else if(name.length()<5 || Pattern.matches("^[A-Za-z]+$", name)==false){
                throw new Exception("Please enter valid  Name");

            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, " Name is Empty");

            return;

        }catch (Exception e){
            JOptionPane.showMessageDialog(null, "  Name is invalid");

            return;
        }

        try {
            if(uname==null || uname.isEmpty()){
                throw new NullPointerException("User Name field is Empty");

            }else if(uname.length()<5){
                throw new Exception("Please enter valid User Name");

            }
        } catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "User Name is Empty");

            return;

        }catch (Exception e){
            JOptionPane.showMessageDialog(null, " User Name is invalid");

            return;
        }

        try {

            if(password==null || password.isEmpty()){
                throw new NullPointerException("Pwd field is Empty");
            }else if(Pattern.matches("^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{5,30}$", password)==false){
                throw new Exception("Invalid Password");
            }

        }  catch(NullPointerException e){
            JOptionPane.showMessageDialog(null, "Password is Empty");

            return;
        }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Password is of invalid pattern");

            return;
        }

        if (ecoSystem.getUserAccountDirectory().IsUsernameUnique(uname)==false) {
            JOptionPane.showMessageDialog(null,"  User Name already exists ");
        }else{

            ecoSystem.getUserAccountDirectory().updateUserAccount(userAccount,name,uname,password);
            populateEntityTable();
            btnSave.setEnabled(true);
            btnDelete.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnConfirmUpdate.setEnabled(false);
            txtName.setText("");
            txtUserName.setText("");
            txtPassword.setText("");
        }
    }//GEN-LAST:event_btnConfirmUpdateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectRow = tblShelter.getSelectedRow();

        if(selectRow>=0){
            String username= (String) tblShelter.getValueAt(selectRow, 1);
            String pwd= (String) tblShelter.getValueAt(selectRow, 2);
            userAccount=ecoSystem.getUserAccountDirectory().authenticateUser(username, pwd);

            txtName.setText(userAccount.getName()+"");
            txtUserName.setText(userAccount.getUsername()+"");
            txtPassword.setText(userAccount.getPassword()+"");
            // system.getUserAccountDirectory().deleteUserAccount(user);

        }
        else {
            JOptionPane.showMessageDialog(null,"Please select a row");
        }
        btnSave.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnConfirmUpdate.setEnabled(true);
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirmUpdate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAvailability;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSubTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JCheckBox rdYes;
    private javax.swing.JTable tblShelter;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void populateEntityTable() {
        DefaultTableModel model = (DefaultTableModel) tblShelter.getModel();
        JTableHeader th = tblShelter.getTableHeader();
        th.setFont(new Font("Serif", Font.BOLD, 15));
        model.setRowCount(0);
        System.out.println("ecoSystemecoSystem" + ecoSystem + ecoSystem.getShelterDirectory().getShelterList().size());
        for (UserAccount user : ecoSystem.getUserAccountDirectory().getUserAccountList()) {
            if ("Model.Role.ShelterHomeAdmin".equals(user.getRole().getClass().getName())) {
                Object[] row = new Object[3];

                row[0] = user.getName();
                row[1] = user.getUsername();
                row[2] = user.getPassword();

                model.addRow(row);
            }

        }
    }
}
